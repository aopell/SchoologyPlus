import findAndReplaceDOMText from "findandreplacedomtext";
import iziToast, { IziToast, IziToastSettings } from "izitoast";
import $ from "jquery";
import "jquery-ui/ui/widgets/tabs";

import { trackEvent } from "../utils/analytics";
import { fetchApi, fetchApiJson, getUserId } from "../utils/api";
import { BETA_TESTS, FORCED_BETA_TEST, createBetaSection } from "../utils/beta";
import { DEFAULT_THEME_NAME, EXTENSION_NAME, EXTENSION_WEBSITE } from "../utils/constants";
import { createElement, createSvgLogo, getBrowser } from "../utils/dom";
import { Logger } from "../utils/logger";
import Modal from "../utils/modal";
import { Settings } from "../utils/splus-settings";
import Theme, { defaultCourseIconUrlRegex } from "../utils/theme";
import { SchoologyTheme } from "../utils/theme-model";
import { createToastButton, showToast } from "../utils/toast";
import { updateSettings } from "../utils/update-settings";
import { versionSpecificFirstLaunch } from "../utils/version";

const targetRowWidth = 6;

const siteNavigationTileHelpers = {
    createSpacerTile: function () {
        return createElement("div", [
            "_3hM4e",
            "_3_a9F",
            "zJU7e",
            "util-width-zero-1OcAd",
            "_2oHes",
            "util-last-child-margin-right-zero-1DVn4",
            "splus-addedtodynamicdropdown",
        ]);
    },
    isSpacerTile: function (element: HTMLElement) {
        return element.childElementCount == 0;
    },
    // tiles must be mutable; caller must not care what happens to it
    // spaceToTotal = desired width
    createTilesRow: function (tiles: HTMLDivElement[], spaceToTotal: number) {
        if (!spaceToTotal) {
            spaceToTotal = targetRowWidth;
        }

        while (tiles.length < spaceToTotal) {
            tiles.push(siteNavigationTileHelpers.createSpacerTile());
        }

        // the two obfuscated classes are the ones Schoology has on its rows
        return createElement("div", ["_1tpub", "Kluyr", "splus-addedtodynamicdropdown"], {}, tiles);
    },

    // selector: (actual content container) (thing which just holds the inner body) (row of tiles)
    rowSelector: 'div[role="menu"] ._3mp5E._24W2g._26UWf ._1tpub.Kluyr',
};

export async function load() {
    alertAutoGeneratedTheme();
    loadBetaFeatures();
    updateDefaultDomainSetting();
    pageModifications();
    await handleNewVersion();
    loadCourseIcons();
    activateEasterEgg();
    addDarkThemeToggleButton();
    addSplusSettingsButton();
    fixNavbarSvgIconColors();
    setupModalCloseEvents();

    // wait 500 ms for the courses dropdown and other dynamic elements to load
    await new Promise(resolve => setTimeout(resolve, 500));

    courseDropdownModifications();
    groupsDropdownModifications();
    moreMenuModifications();
    reorderUIElements();

    attemptDisplayCourseAliases();
    displayGradesInNotificationDropdown();
    preventScrollingWhenModalOpen();
    displayAssessmentDarkThemeWarningMessage();
    createSettingsHashListener();
}

export async function preload() {
    Logger.log(
        `Loaded ${EXTENSION_NAME} version ${chrome.runtime.getManifest().version}${
            getBrowser() != "Chrome" || (chrome.runtime.getManifest() as any).update_url
                ? ""
                : " (development version)"
        }`
    );
    document.documentElement.setAttribute("page", location.pathname);

    await updateSettings();

    autoBypassLinkRedirects();

    Logger.debug("Finished loading preload.js");
}

function alertAutoGeneratedTheme() {
    // Inform user about theme
    if (localStorage["splus-temp-generatedtheme"]) {
        localStorage.removeItem("splus-temp-generatedtheme");

        showToast(
            "Theme Generated",
            `${EXTENSION_NAME} created a theme that matches your school's theme`,
            "rgb(0,255,0)",
            {
                buttons: [
                    createToastButton(
                        "View Themes",
                        "view-themes-button",
                        () => (location.href = chrome.runtime.getURL("/theme-editor.html"))
                    ),
                ],
            }
        );
    }
}

export function loadBetaFeatures() {
    let betaCode = FORCED_BETA_TEST || Settings.BetaCode.value;
    let betaSection = null;
    if (betaCode && betaCode in BETA_TESTS) {
        // Beta Enabled Notice
        let betaTag = createElement("span", ["splus-beta-tag", "splus-track-clicks"], {
            textContent: "Î²",
            id: "beta-tag",
        });
        betaTag.addEventListener("click", event => Modal.openModal("beta-modal"));
        let betaContainer = createElement("div", ["splus-beta-container"], {}, [betaTag]);
        document.body.append(betaContainer);
        betaSection = createBetaSection(betaCode);
        betaContainer.append(betaSection);

        BETA_TESTS[betaCode]?.activate?.();
    }
}

function updateDefaultDomainSetting() {
    // Check Schoology domain
    setTimeout(checkDomain, 2000);

    async function checkDomain() {
        const DISALLOWED_DOMAINS = [
            "asset-cdn.schoology.com",
            "developer.schoology.com",
            "support.schoology.com",
            "info.schoology.com",
            "files-cdn.schoology.com",
            "status.schoology.com",
            "ui.schoology.com",
            "www.schoology.com",
            "api.schoology.com",
            "developers.schoology.com",
            "schoology.com",
            "error-page.schoology.com",
            "app-msft-teams.schoology.com",
            "lti-submission-google.app.schoology.com",
            "lti-submission-microsoft.app.schoology.com",
            "googledrive.app.schoology.com",
            "onedrive.app.schoology.com",
        ];

        let dd = Settings.DefaultDomain.value;

        if (
            dd !== window.location.hostname &&
            !DISALLOWED_DOMAINS.includes(window.location.hostname) &&
            !window.location.hostname.match(/.*[-\.]app\.schoology\.com/)
        ) {
            await Settings.DefaultDomain.setValue(window.location.hostname);

            let bgColor =
                document.querySelector<HTMLElement>("#header header")!.style.backgroundColor;

            if (
                bgColor &&
                !["app.schoology.com", "lms.lausd.net"].includes(window.location.hostname)
            ) {
                let t = {
                    name: `Auto Generated Theme for ${window.location.hostname}`,
                    version: 2,
                    color: {
                        custom: {
                            primary: bgColor,
                            hover: "rgb(2, 79, 125)",
                            background: "rgb(2, 79, 125)",
                            border: "rgb(2, 79, 125)",
                        },
                    },
                    logo: {
                        preset: "default",
                    },
                };

                localStorage["splus-temp-generatedtheme"] = true;

                let s = await chrome.storage.sync.get({ themes: [] });
                let themes = (s as { themes: SchoologyTheme[] }).themes.filter(
                    x => x.name !== `Auto Generated Theme for ${window.location.hostname}`
                );
                themes.push(t as SchoologyTheme);
                await chrome.storage.sync.set({ themes: themes });
                Logger.log(
                    `${EXTENSION_NAME} has updated the domain on which it runs.\nPrevious: ${dd}\nNew: ${window.location.hostname}`
                );
                location.reload();
            } else {
                Logger.log(
                    `${EXTENSION_NAME} has updated the domain on which it runs.\nPrevious: ${dd}\nNew: ${window.location.hostname}`
                );
                location.reload();
            }
        }
    }
}

function pageModifications() {
    // Page Modifications

    document.head.appendChild(
        createElement("meta", [], {
            name: "viewport",
            content: "width=device-width, initial-scale=1",
        })
    );
    let bottom = document.querySelector("span.Footer-copyright-2Vt6I");
    bottom?.appendChild(
        createElement("span", ["footer-divider"], { textContent: "|" }, [
            createElement("span", ["footer-text-enhanced-by"], {
                style: { cursor: "pointer" },
                onclick: () =>
                    window.open(
                        `${EXTENSION_WEBSITE}/?utm_source=ext-enhanced-by-footer`,
                        "_blank"
                    ),
                textContent: `Enhanced by ${EXTENSION_NAME}`,
            }),
        ])
    );

    document.documentElement.style.setProperty("--default-visibility", "visible");
}

async function handleNewVersion() {
    // Run when new version installed
    let newVersion = Settings.LastLoadedVersion.value;
    if (!newVersion || newVersion != chrome.runtime.getManifest().version) {
        let currentVersion = chrome.runtime.getManifest().version;

        if (Settings.DefaultDomain.value != window.location.hostname) {
            Logger.log(
                "[Updater] Domain isn't set as default, skipping migrations until domain is updated."
            );
            return;
        }

        iziToast.show({
            theme: "dark",
            iconUrl: chrome.runtime.getURL("/imgs/plus-icon.png"),
            title: `Welcome to ${EXTENSION_NAME} version ${currentVersion}!`,
            position: "topRight",
            timeout: 0,
            progressBarColor: "hsl(190, 100%, 50%)",
            buttons: [
                [
                    "<button>View Changelog</button>",
                    function (instance: IziToast, toast: HTMLDivElement) {
                        instance.hide(
                            {
                                transitionOut: "fadeOutRight",
                                onClosing: function () {
                                    trackEvent("button_click", {
                                        id: "viewChangelogButton",
                                        context: "Toast",
                                        legacyTarget: "viewChangelogButton",
                                        legacyAction: "click",
                                        legacyLabel: "Toast Button",
                                    });
                                    Modal.openModal("changelog-modal");
                                },
                            },
                            toast,
                            "viewChangelogButton"
                        );
                    },
                    true,
                ],
            ],
        } as IziToastSettings);

        versionSpecificFirstLaunch(currentVersion, newVersion);
        await Settings.LastLoadedVersion.setValue(chrome.runtime.getManifest().version);
    }
}

async function loadCourseIcons() {
    Theme.profilePictureOverrides = [];
    let courseProfilePicOverrides = Settings.ForceDefaultCourseIcons.value;

    let profilePicLoadTasks = [];

    for (let courseId in courseProfilePicOverrides) {
        if (courseProfilePicOverrides[courseId] == "enabled") {
            profilePicLoadTasks.push(fetchApiJson("/sections/" + courseId));
        }
    }

    Logger.log("Forcing Schoology-default icons for " + profilePicLoadTasks.length + " courses");

    // from https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex/6969486#6969486
    function escapeRegExp(string: string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
    }

    let overrides = await Promise.all(profilePicLoadTasks);
    for (let course of overrides) {
        Theme.profilePictureOverrides.push({
            regex: escapeRegExp(course.course_title) + " ?: " + escapeRegExp(course.section_title),
            url: course.profile_url,
        });
    }

    if (profilePicLoadTasks.length > 0) {
        Theme.setProfilePictures();
    }
}

function activateEasterEgg() {
    let video = document.body.appendChild(
        createElement("video", ["easter-egg"], {
            onended: () => {
                video.style.visibility = "hidden";
            },
        })
    );

    let source = createElement("source", [], {
        src: "https://gist.github.com/aopell/0fe2408cffbab2b6fadb18ebaa28808f/raw/77853f137329c042c34bdb5be38c1930357c0531/cut.webm",
        type: "video/webm",
    });

    let sourceSet = false;

    document.body.addEventListener("keydown", data => {
        if (data.altKey && data.code === "KeyC") {
            if (!sourceSet) {
                video.appendChild(source);
                sourceSet = true;
            }
            video.style.visibility = "visible";
            video.currentTime = 0;
            video.play();

            trackEvent("perform_action", {
                id: "activate",
                context: "Easter Egg",
                value: "confetti",
                legacyTarget: "Easter Egg",
                legacyAction: "play",
                legacyLabel: "Easter Egg",
            });
        } else if (data.altKey && data.code === "KeyB") {
            Modal.openModal("beta-modal");
        } else if (data.key === "Escape") {
            video.style.visibility = "hidden";
            video.pause();
        }
    });
}

function addDarkThemeToggleButton() {
    document.querySelector<HTMLUListElement>("#header > header > nav > ul:nth-child(2)")?.prepend(
        createElement("li", ["_24avl", "_3Rh90", "_349XD"], {}, [
            createElement(
                "button",
                [
                    "_1SIMq",
                    "_2kpZl",
                    "_3OAXJ",
                    "_13cCs",
                    "_3_bfp",
                    "_2M5aC",
                    "_24avl",
                    "_3v0y7",
                    "_2s0LQ",
                    "_3ghFm",
                    "_3LeCL",
                    "_31GLY",
                    "_9GDcm",
                    "_1D8fw",
                    "util-height-six-3PHnk",
                    "util-line-height-six-3lFgd",
                    "util-text-decoration-none-1n0lI",
                    "Header-header-button-active-state-3AvBm",
                    "Header-header-button-1EE8Y",
                    "sExtlink-processed",
                    "splus-track-clicks",
                ],
                {
                    id: "darktheme-toggle-navbar-button",
                    title: `Toggle Theme\n\nUse this button to temporarily disable your ${EXTENSION_NAME} theme if something isn't displaying correctly.`,
                    onclick: e => {
                        let newVal =
                            document.documentElement.getAttribute("modern") == "false"
                                ? "true"
                                : "false";
                        if (newVal == "false") {
                            Theme.tempTheme = DEFAULT_THEME_NAME;
                        } else {
                            Theme.tempTheme = undefined;
                        }
                        Theme.apply(Theme.active);
                        document.documentElement.setAttribute("modern", newVal);
                        trackEvent("button_click", {
                            id: "modern-theme-toggle",
                            context: "Navbar",
                            value: newVal,
                            legacyTarget: "modern-theme-toggle",
                            legacyAction: newVal,
                            legacyLabel: "Navbar Button",
                        });
                    },
                    dataset: {
                        popup: (
                            Settings.Popups.nestedValue("modernThemeToggle", true) &&
                            localStorage.getItem("popup.modernThemeToggle") !== "false"
                        ).toString(),
                    },
                },
                [
                    createElement("div", ["explanation-popup"], {}, [
                        createElement("span", [], {
                            title: "",
                            textContent: `Use this button to temporarily disable your ${EXTENSION_NAME} theme if something isn't displaying correctly.`,
                        }),
                        createElement("h3", [], {
                            textContent: "OK",
                            onclick: e => {
                                e.stopPropagation();
                                trackEvent("button_click", {
                                    id: "modern-theme-toggle-explanation-ok",
                                    context: "Explanation Popup",
                                    legacyTarget: "modern-theme-toggle",
                                    legacyAction: "ok",
                                    legacyLabel: "Explanation Popup",
                                });
                                Settings.Popups.setNestedValue("modernThemeToggle", false);
                                localStorage.setItem("popup.modernThemeToggle", "false");
                                document.getElementById(
                                    "darktheme-toggle-navbar-button"
                                )!.dataset.popup = "false";
                            },
                        }),
                    ]),

                    (function () {
                        let paintSvg = document.createElementNS(
                            "http://www.w3.org/2000/svg",
                            "svg"
                        );
                        paintSvg.setAttribute("viewBox", "-12 -20 500 500");
                        paintSvg.setAttribute("class", "_3ESp2 dlCBz _1I3mg fjQuT uQOmx");

                        paintSvg.innerHTML =
                            '<path d="m242 197v90c0 8.284 6.716 15 15 15h180c8.284 0 15-6.716 15-15v-90c0-8.284-6.716-15-15-15h-180c-8.284 0-15 6.716-15 15z"/><path d="m377 422h-60c-8.284 0-15 6.716-15 15v60c0 8.284 6.716 15 15 15h60c8.284 0 15-6.716 15-15v-60c0-8.284-6.716-15-15-15z"/><path d="m307.667 15c0-8.284-6.716-15-15-15h-45v60h60z"/><path d="m217.667 0h-202.667c-8.284 0-15 6.716-15 15v45h217.667z"/><path d="m307.667 347v-15h-50.667c-24.813 0-45-20.186-45-45v-90c0-24.814 20.187-45 45-45h50.667v-62h-307.667v257c0 8.284 6.716 15 15 15h277.667c8.284 0 15-6.716 15-15zm-155.698-46h-91.969c-8.284 0-15-6.716-15-15s6.716-15 15-15h91.969c8.284 0 15 6.716 15 15s-6.716 15-15 15zm0-60h-91.969c-8.284 0-15-6.716-15-15s6.716-15 15-15h91.969c8.284 0 15 6.716 15 15s-6.716 15-15 15zm0-60h-91.969c-8.284 0-15-6.716-15-15s6.716-15 15-15h91.969c8.284 0 15 6.716 15 15s-6.716 15-15 15z"/><path d="m482 229.58v87.42c0 8.272-6.728 15-15 15h-90c-24.814 0-45 20.186-45 45v15h30v-15c0-8.272 6.728-15 15-15h90c24.814 0 45-20.186 45-45v-45c0-19.555-12.541-36.227-30-42.42z"/>';

                        return paintSvg;
                    })(),
                ]
            ),
        ])
    );
}

function addSplusSettingsButton() {
    document.querySelector("#header > header > nav > ul:nth-child(2)")?.prepend(
        createElement("li", ["_24avl", "_3Rh90", "_349XD"], {}, [
            createElement(
                "button",
                [
                    "_1SIMq",
                    "_2kpZl",
                    "_3OAXJ",
                    "_13cCs",
                    "_3_bfp",
                    "_2M5aC",
                    "_24avl",
                    "_3v0y7",
                    "_2s0LQ",
                    "_3ghFm",
                    "_3LeCL",
                    "_31GLY",
                    "_9GDcm",
                    "_1D8fw",
                    "util-height-six-3PHnk",
                    "util-line-height-six-3lFgd",
                    "util-text-decoration-none-1n0lI",
                    "Header-header-button-active-state-3AvBm",
                    "Header-header-button-1EE8Y",
                    "sExtlink-processed",
                ],
                {
                    id: "splus-settings-navbar-button",
                    title: `${EXTENSION_NAME} Settings\n\nChange settings relating to ${EXTENSION_NAME}.`,
                    onclick: () => {
                        Modal.openModal("settings-modal");
                        trackEvent("button_click", {
                            id: "splus-settings",
                            context: "Navbar",
                            legacyTarget: "splus-settings",
                            legacyAction: "open",
                            legacyLabel: "Navbar Button",
                        });
                    },
                },
                [createSvgLogo("_3ESp2", "dlCBz", "_1I3mg", "fjQuT", "uQOmx")]
            ),
        ])
    );
}

function fixNavbarSvgIconColors() {
    let svgIcons = document.querySelectorAll("#header header nav ul svg use");
    for (let icon of svgIcons) {
        let href = icon.getAttribute("xlink:href");
        if (href) {
            let symbol = document.querySelector(href);
            if (symbol) {
                let paths = symbol.querySelectorAll("path");
                for (let path of paths) {
                    if (path.getAttribute("fill")?.trim() === "#333") {
                        icon.parentElement?.classList.add("splus-svg-icon-processed");
                        path.setAttribute("fill", "currentColor");
                    }
                }
            }
        }
    }
}

function setupModalCloseEvents() {
    window.addEventListener("click", event => {
        if (Modal.modals.find(x => x.element == event.target)) {
            Modal.closeAllModals();
        }
    });
}

function shouldProcessMutations(mutationList: MutationRecord[]) {
    let processThis = false;

    // ensure we're processing more than an addition of something this very handler added
    for (let mutation of mutationList) {
        for (let addedElem of mutation.addedNodes) {
            if (
                addedElem instanceof HTMLElement &&
                addedElem.classList &&
                !addedElem.classList.contains("splus-addedtodynamicdropdown")
            ) {
                processThis = true;
                break;
            }
        }

        if (processThis) {
            break;
        }
    }

    return processThis;
}

function courseDropdownModifications() {
    let coursesDropdownContainer: HTMLElement | null | undefined = null;

    let coursesDropdownObserver = new MutationObserver(function (mutationList) {
        if (!shouldProcessMutations(mutationList)) {
            return;
        }

        Logger.log("Processing courses dropdown mutation");

        if (Settings.ArchivedCoursesButton.value === "show") {
            // aims to select the original "My Courses" link in the dropdown
            let candidateLink = coursesDropdownContainer?.querySelector(
                '.CjR09._8a6xl._1tpub > a[href="/courses"]._3ghFm'
            );
            if (candidateLink) {
                // the obfuscated class name is the one Schoology uses to float these links right
                let newContainer = createElement(
                    "div",
                    [
                        "courses-mycourses-droppeddown-link-container",
                        "splus-addedtodynamicdropdown",
                        "_3ghFm",
                    ],
                    {},
                    [
                        createElement(
                            "a",
                            ["floating-contained-link", "splus-addedtodynamicdropdown"],
                            {
                                href: "/courses",
                                textContent: "My Courses",
                            }
                        ),
                        createElement(
                            "a",
                            ["floating-contained-link", "splus-addedtodynamicdropdown"],
                            {
                                href: "/courses/mycourses/past",
                                textContent: "Past Courses",
                            }
                        ),
                    ]
                );

                candidateLink.replaceWith(newContainer);
            }
        }

        // rearrange spacing in the courses dropdown
        // Schoology has 4 tiles per row by default, we want 6

        let rowContainer: HTMLElement | null = null;
        let tiles: HTMLDivElement[] = [];

        let needsReorganization = false;

        for (let tilesRow of coursesDropdownContainer?.querySelectorAll(
            siteNavigationTileHelpers.rowSelector
        ) || []) {
            if (!rowContainer) {
                rowContainer = tilesRow.parentElement;
            }
            if (tilesRow.childElementCount != targetRowWidth) {
                needsReorganization = true;
            }
            for (let tile of tilesRow.children as HTMLCollectionOf<HTMLDivElement>) {
                if (!siteNavigationTileHelpers.isSpacerTile(tile)) {
                    tiles.push(tile);
                }
            }
        }

        // used later, clone the complete tiles list
        let contentTiles = tiles.slice(0);

        if (needsReorganization) {
            let nodeToDelete;
            while (
                (nodeToDelete = coursesDropdownContainer?.querySelector(
                    siteNavigationTileHelpers.rowSelector
                ))
            ) {
                nodeToDelete.remove();
            }

            while (tiles.length > 0) {
                rowContainer?.appendChild(
                    siteNavigationTileHelpers.createTilesRow(
                        tiles.splice(0, targetRowWidth),
                        targetRowWidth
                    )
                );
            }
        }

        let tileWidthCap;

        if (contentTiles.length > 0) {
            tileWidthCap = window.getComputedStyle(contentTiles[0]).width;
        }

        // nicknames in courses dropdown
        // these need to be handled specially because it's not displayed as one contiguous block anymore
        for (let contentTile of contentTiles) {
            let cardData = contentTile.querySelector(".Card-card-data-17m6S");
            if (
                !cardData ||
                cardData.querySelector(".splus-coursesdropdown-nicknamed-dataset") ||
                cardData.childElementCount > 1
            ) {
                // not a course, or already handled
                continue;
            }

            let courseAlias: string | undefined;
            let cardParent = cardData.parentElement as HTMLAnchorElement;
            if (cardParent.href) {
                let courseLinkMatch = cardParent.href.split("/").at(-2);
                if (courseLinkMatch) {
                    courseAlias = Settings.CourseNicknames.nestedValue(courseLinkMatch);
                }
            }

            if (!courseAlias) {
                continue;
            }

            // create our splus-coursesdropdown-nicknamed-dataset
            // we can't delete the old one because theming uses data from it
            (cardData.firstElementChild as HTMLElement).style.display = "none";

            // Schoology's styling: by default, card data has:
            // course name, in blue, at top: div._3U8Br._2s0LQ._2qcpH._3ghFm._17Z60._1Aph-.gs0RB
            // section title, in black, in middle (most emphasized, I think): div._1wP6w._23_WZ._2qcpH._3ghFm._17Z60._1Aph-.gs0RB
            // school name, in smaller gray at bottom: div._2wOCj.xjR5v._2qcpH._17Z60._1Aph-.gs0RB

            let origCourseTitle = cardData.firstElementChild?.querySelector(
                "div._3U8Br._2s0LQ._2qcpH._3ghFm._17Z60._1Aph-.gs0RB"
            );
            let origSectionTitle = cardData.firstElementChild?.querySelector(
                "div._1wP6w._23_WZ._2qcpH._3ghFm._17Z60._1Aph-.gs0RB"
            );
            let origSchoolTitle = cardData.firstElementChild?.querySelector(
                "div._2wOCj.xjR5v._2qcpH._17Z60._1Aph-.gs0RB"
            );

            // stylistically equivalent to the other card data, in terms of our class list for the container element
            // FIXME: there's a stylistic incongruity between a nicknamed course in the dropdown and a non-nicknamed one
            let newCardDataChild = createElement(
                "div",
                [
                    "_36sHx",
                    "_3M0N7",
                    "fjQuT",
                    "_1EyV_",
                    "splus-coursesdropdown-nicknamed-dataset",
                    "splus-addedtodynamicdropdown",
                ],
                {},
                [
                    createElement(
                        "div",
                        [
                            "_3U8Br",
                            "_1wP6w",
                            "_23_WZ",
                            "_2qcpH",
                            "_3ghFm",
                            "_17Z60",
                            "_1Aph-",
                            "gs0RB",
                        ],
                        { textContent: courseAlias }
                    ), // stylized like section title
                    createElement(
                        "div",
                        [
                            "_2wOCj",
                            "xjR5v",
                            "_2qcpH",
                            "_17Z60",
                            "_1Aph-",
                            "gs0RB",
                            "splus-coursealiasing-exempt",
                        ],
                        {
                            textContent:
                                origCourseTitle?.textContent + ": " + origSectionTitle?.textContent,
                        }
                    ), // original full title, stylized like school name
                    createElement(
                        "div",
                        ["_2wOCj", "xjR5v", "_2qcpH", "_17Z60", "_1Aph-", "gs0RB"],
                        { textContent: origSchoolTitle?.textContent }
                    ), // school title, original styling and text
                ]
            );
            if (tileWidthCap) {
                newCardDataChild.style.maxWidth = tileWidthCap;
            }
            cardData.appendChild(newCardDataChild);
        }

        // reorder courses button
        let coursesHeader = coursesDropdownContainer?.querySelector(".CjR09._8a6xl._1tpub > h2");
        if (coursesHeader && !coursesHeader.querySelector(".splus-coursesdropdown-reorder-btn")) {
            // https://www.flaticon.com/free-icon/sort_159800
            let newBtn = createElement(
                "img",
                ["splus-coursesdropdown-reorder-btn", "splus-addedtodynamicdropdown"],
                {
                    src: "https://cdn-icons-png.flaticon.com/512/690/690319.png",
                    title: "Reorder Courses",
                    alt: "Reorder Icon",
                }
            );
            newBtn.onclick = () => (location.href = "/courses?reorder");
            coursesHeader.appendChild(newBtn);
        }
    });

    for (let candidateLabel of document.querySelectorAll("#header nav ul > li button > span")) {
        if (candidateLabel.textContent == "Courses") {
            // a span inside a button inside a div (inside a li)
            coursesDropdownContainer = candidateLabel?.parentElement?.parentElement;

            // to make interaction throughout the rest of the codebase easier
            coursesDropdownContainer?.parentElement?.classList.add("splus-courses-navbar-button");
            break;
        }
    }

    if (!coursesDropdownContainer) {
        return;
    }

    coursesDropdownObserver.observe(coursesDropdownContainer, { childList: true, subtree: true });
}

function groupsDropdownModifications() {
    let groupsDropdownContainer: HTMLElement | null | undefined = null;

    let groupsDropdownObserver = new MutationObserver(function (mutationList) {
        if (!shouldProcessMutations(mutationList)) {
            return;
        }

        Logger.log("Processing groups dropdown mutation");

        // rearrange spacing in the courses dropdown
        // Schoology has 4 tiles per row by default, we want 6
        // primarily we do this to match the courses dropdown
        const targetRowWidth = 6;

        let rowContainer;
        let tiles = [];

        let needsReorganization = false;

        for (let tilesRow of groupsDropdownContainer?.querySelectorAll(
            siteNavigationTileHelpers.rowSelector
        ) || []) {
            if (!rowContainer) {
                rowContainer = tilesRow.parentElement;
            }
            if (tilesRow.childElementCount != targetRowWidth) {
                needsReorganization = true;
            }
            for (let tile of tilesRow.children as HTMLCollectionOf<HTMLDivElement>) {
                if (!siteNavigationTileHelpers.isSpacerTile(tile)) {
                    tiles.push(tile);
                }
            }
        }

        if (needsReorganization) {
            let nodeToDelete;
            while (
                (nodeToDelete = groupsDropdownContainer?.querySelector(
                    siteNavigationTileHelpers.rowSelector
                ))
            ) {
                nodeToDelete.remove();
            }

            while (tiles.length > 0) {
                rowContainer?.appendChild(
                    siteNavigationTileHelpers.createTilesRow(
                        tiles.splice(0, targetRowWidth),
                        targetRowWidth
                    )
                );
            }
        }
    });

    for (let candidateLabel of document.querySelectorAll("#header nav ul > li button > span")) {
        if (candidateLabel.textContent == "Groups") {
            // a span inside a button inside a div (inside a li)
            groupsDropdownContainer = candidateLabel?.parentElement?.parentElement;

            // to make interaction throughout the rest of the codebase easier
            groupsDropdownContainer?.parentElement?.classList?.add("splus-groups-navbar-button");
            break;
        }
    }

    if (!groupsDropdownContainer) {
        return;
    }

    groupsDropdownObserver.observe(groupsDropdownContainer, { childList: true, subtree: true });
}

function moreMenuModifications() {
    let navigationElementsContainer = document.querySelector<HTMLLIElement>(
        "#header nav > ul:nth-child(1)"
    );

    let fixNavButtons = function () {
        let moreNavElement = navigationElementsContainer?.querySelector<HTMLElement>(
            'li > button[aria-label="More"]'
        );
        let alreadyTweakedResourcesBtn = navigationElementsContainer?.querySelector<HTMLLIElement>(
            "li.splus-nav-resources-lowwidth"
        );
        let fakeGradesBtn = navigationElementsContainer?.querySelector<HTMLLIElement>(
            "li.splus-nav-grades-directlink-lowwidth"
        );
        if (moreNavElement) {
            moreNavElement = moreNavElement.parentElement;
        } else {
            // in a high width case
            // we need to determine if this is a transition or if the changes are irrelevant
            if (alreadyTweakedResourcesBtn) {
                alreadyTweakedResourcesBtn.style.display = "initial";
            }
            if (fakeGradesBtn) {
                fakeGradesBtn.style.display = "none";
            }
        }

        if (!moreNavElement || moreNavElement.classList.contains("splus-moremenu-gradesreadded")) {
            return;
        }

        moreNavElement.classList.add("splus-moremenu-gradesreadded");

        // remove the resources button - we're going to replace it with a grade report button
        let resLink = moreNavElement.previousElementSibling as HTMLElement;
        if (resLink.querySelector("a")!.href.endsWith("/resources")) {
            resLink.classList.add("splus-nav-resources-lowwidth");
            resLink.style.display = "none";

            let gradesBtn = document.createElement("li");
            gradesBtn.classList.add("_24avl");
            gradesBtn.classList.add("_3Rh90");
            gradesBtn.classList.add("splus-nav-grades-directlink-lowwidth");
            gradesBtn.innerHTML =
                '<a class="_1SIMq _2kpZl _3OAXJ _13cCs _3_bfp _2M5aC _24avl _3v0y7 _2s0LQ _3ghFm _3LeCL _31GLY _9GDcm _1D8fw util-height-six-3PHnk util-line-height-six-3lFgd util-text-decoration-none-1n0lI Header-header-button-active-state-3AvBm Header-header-button-1EE8Y sExtlink-processed" href="/grades/grades">Grades</a>';
            moreNavElement.insertAdjacentElement("beforebegin", gradesBtn);
        } else if (fakeGradesBtn) {
            if (alreadyTweakedResourcesBtn) {
                alreadyTweakedResourcesBtn.style.display = "none";
            }
            fakeGradesBtn.style.display = "initial";
        }
    };

    let navigationElementsObserver = new MutationObserver(function (mutationList) {
        if (!shouldProcessMutations(mutationList)) {
            return;
        }

        // spacing around the More... menu [reolace "Resources" with "Grades"]
        fixNavButtons();

        // the More... menu itself
        (function () {
            let moreMenuDropdownList = navigationElementsContainer?.querySelector(
                'li > div[role="menu"] > ul.util-flex-shrink-zero-3HoBE:nth-child(1)'
            );
            if (
                !moreMenuDropdownList ||
                moreMenuDropdownList.classList.contains("splus-moremenuentries-gradesprocessed")
            ) {
                return;
            }

            moreMenuDropdownList.classList.add("splus-moremenuentries-gradesprocessed");

            // remove the grades optiony menu that's under "more"
            moreMenuDropdownList
                ?.querySelector('button[data-submenu="grades"]')
                ?.parentElement?.remove();

            // first element child is the search bar
            // we want to insert directly after that
            let insertAfter = moreMenuDropdownList.firstElementChild as HTMLElement;

            let masteryLink = document.createElement("li");
            // use Schoology's convoluted class list, as presented in the original
            masteryLink.innerHTML =
                '<a aria-label="Mastery Grades" href="/mastery" class="Header-header-button-active-state-3AvBm Header-header-drop-menu-3SaYV Header-header-drop-menu-item-3d3IZ _2JX1Q _1k0yk _1tpub _3_bfp _3ghFm xjR5v _3lLLU _2gJbx util-text-decoration-none-1n0lI">Mastery Grades</a>';

            insertAfter.insertAdjacentElement("afterend", masteryLink);

            let resourcesLink = document.createElement("li");
            resourcesLink.innerHTML =
                '<a aria-label="Resources" href="/resources" class="Header-header-button-active-state-3AvBm Header-header-drop-menu-3SaYV Header-header-drop-menu-item-3d3IZ _2JX1Q _1k0yk _1tpub _3_bfp _3ghFm xjR5v _3lLLU _2gJbx util-text-decoration-none-1n0lI">Resources</a>';

            insertAfter.insertAdjacentElement("afterend", resourcesLink);
        })();
    });

    navigationElementsObserver.observe(navigationElementsContainer as HTMLElement, {
        childList: true,
        subtree: true,
    });

    // fix the nav buttons (for "fix" as defined above) immediately - this handles a page initially loading as low-width

    if (document.readyState === "complete" || document.readyState !== "loading") {
        fixNavButtons();
    } else {
        document.addEventListener(
            "DOMContentLoaded",
            function () {
                fixNavButtons();
            },
            false
        );
    }
}

function reorderUIElements() {
    let docObserver = new MutationObserver(function (mutationList) {
        if (!shouldProcessMutations(mutationList)) {
            return;
        }

        // make sure the reorder UI is visible; if not, don't try the expensive query
        let reorderHeader = document.querySelector(
            "header.LGaPf h1._3eD4l._3UytQ._3v0y7._16XsF._8a6xl"
        );
        if (!reorderHeader || reorderHeader.textContent != "Reorder Courses") {
            return;
        }

        // cards in the reorder UI
        let reorderUiCards = document.querySelectorAll(
            'div._1Z0RM._1tpub._2V6ED._3xHd3.L1I_b._9GENG._3LeCL._34eht._349XD.fjQuT.uQOmx._17X0S._36TKt._3qXK_._3WTX2.Mcjpm._4iu5i.jDhMt._3WDJD.CrxjQ[role="dialog"][aria-labelledby*="reorder-ui"] div._1Z0RM._3skcp._5jizS._1tpub._1SnLN._3LeCL._3lLLU._2gJbx.Card-card-2rORL'
        );

        let reprocessPictures: HTMLImageElement[] = [];

        for (let classCard of reorderUiCards) {
            let classImg = classCard.querySelector<HTMLImageElement>("img._2oHes");
            if (!classImg) {
                continue;
            }

            // div containing course, section, and school names
            let descDiv = classCard.querySelector("div._1wP6w._2s0LQ._2qcpH._1XYMV._17Z60._2oHes");

            // <COURSE NAME>: <SECTION NAME>
            let nameComponents = [];
            for (let descPart of descDiv?.querySelectorAll("div:not([class])") || []) {
                nameComponents.push(descPart.textContent);
            }

            classImg.alt = "Profile picture for " + nameComponents.join(": ");
            reprocessPictures.push(classImg);
        }

        Theme.setProfilePictures(reprocessPictures);
    });

    docObserver.observe(document.body, { childList: true, subtree: true });
}

async function attemptDisplayCourseAliases() {
    let applyCourseAliases = null;
    let applyThemeIcons: (() => void) | null = null;

    // PREP COURSE ICONS
    // course dashboard
    let mainInner = document.getElementById("main-inner");
    let courseDashboard = mainInner && window.location.pathname == "/home/course-dashboard";
    let hasAppliedDashboard = false;

    // duplicate of logic in themes.js; needed because we do mutation logic here
    let skipOverriddenIcons = Settings.OverrideCourseIcons.value === "defaultOnly";

    if (Settings.OverrideCourseIcons.value != "disabled") {
        applyThemeIcons = function () {
            let ancillaryList: HTMLImageElement[] = [];
            if (courseDashboard && !hasAppliedDashboard) {
                let cardLenses = mainInner?.querySelectorAll(".course-dashboard .sgy-card-lens");
                if (cardLenses && cardLenses.length > 0) {
                    ancillaryList = [];
                    //Course icons on "Course Dashboard" view of homepage
                    for (let tile of cardLenses) {
                        // check if not default icon
                        // underlying method does this, but since we mutate we have to do it too
                        if (
                            skipOverriddenIcons &&
                            !(
                                (tile.firstChild as HTMLObjectElement).data ||
                                (tile.firstChild as HTMLImageElement).src ||
                                ""
                            ).match(defaultCourseIconUrlRegex)
                        ) {
                            continue;
                        }

                        let initialSrc =
                            (tile.firstChild as HTMLObjectElement).data ||
                            (tile.firstChild as HTMLImageElement).src ||
                            "";

                        // clear children
                        while (tile.firstChild) {
                            tile.removeChild(tile.firstChild);
                        }
                        // create an img
                        let img = document.createElement("img");
                        img.src = initialSrc;
                        // find course name
                        // note the context footer does linebreaks, so we have to undo that
                        let courseName = tile.parentElement
                            ?.querySelector(".course-dashboard__card-context-title")
                            ?.textContent?.replace("\n", " ");
                        img.alt = "Profile picture for " + courseName;
                        // to mirror original styling and behavior
                        img.classList.add("course-dashboard__card-lens-svg");
                        img.tabIndex = -1;

                        tile.appendChild(img);
                        ancillaryList.push(img);
                    }
                    hasAppliedDashboard = true;
                }
            }
            Theme.setProfilePictures(ancillaryList);
        };
        applyThemeIcons();
    }

    // PREP COURSE ALIASES
    if (Settings.CourseNicknames.value) {
        let myClasses: Record<string, any>[] = (
            await fetchApiJson(`/users/${getUserId()}/sections`)
        ).section;

        // get course info for courses with aliases that I'm not currently enrolled in, concurrently
        myClasses.push(
            ...(await Promise.all(
                Object.keys(Settings.CourseNicknames.value)
                    .filter(
                        aliasedCourseId =>
                            !myClasses.some((x: Record<string, string>) => x.id == aliasedCourseId)
                    )
                    .filter(aliasedCourseId =>
                        Settings.CourseNicknames.nestedValue(aliasedCourseId)
                    ) // only fetch if the alias hasn't subsequently been cleared
                    .map(id =>
                        fetchApi(`/sections/${id}`).then(
                            resp => resp.json().catch(rej => null),
                            rej => null
                        )
                    )
            ))
        );

        Logger.log("Classes loaded, building alias stylesheet");
        // https://stackoverflow.com/a/707794 for stylesheet insertion
        let sheet = window.document.styleSheets[0];

        for (let aliasedCourseId in Settings.CourseNicknames.value) {
            // https://stackoverflow.com/a/18027136 for text replacement
            sheet.insertRule(
                `.course-name-wrapper-${aliasedCourseId} {
                visibility: hidden;
                word-spacing:-999px;
                letter-spacing: -999px;
            }`,
                sheet.cssRules.length
            );
            sheet.insertRule(
                `.course-name-wrapper-${aliasedCourseId}:after {
                content: "${Settings.CourseNicknames.nestedValue(aliasedCourseId)}";
                visibility: visible;
                word-spacing:normal;
                letter-spacing:normal; 
            }`,
                sheet.cssRules.length
            );
        }

        Logger.log("Applying aliases");
        applyCourseAliases = function (mutationsList?: MutationRecord[]) {
            let rootElement = document.body;

            if (mutationsList && mutationsList.length == 0) {
                return;
            }

            if (mutationsList && mutationsList.length == 1) {
                rootElement = mutationsList[0].target as HTMLElement;
            }

            for (let jsonCourse of myClasses) {
                if (!jsonCourse || !Settings.CourseNicknames.nestedValue(jsonCourse.id)) {
                    continue;
                }

                let findTexts = [
                    jsonCourse.course_title + ": " + jsonCourse.section_title,
                    jsonCourse.course_title + " : " + jsonCourse.section_title,
                ];
                let wrapClassName = "course-name-wrapper-" + jsonCourse.id;

                for (let findText of findTexts) {
                    findAndReplaceDOMText(rootElement, {
                        find: findText,
                        wrap: "span",
                        wrapClass: wrapClassName,
                        portionMode: "first",
                        filterElements: elem =>
                            !elem.classList ||
                            !elem.classList.contains("splus-coursealiasing-exempt"),
                    });

                    let currentCourseAlias = Settings.CourseNicknames.nestedValue(jsonCourse.id);
                    if (currentCourseAlias) {
                        document.title = document.title.replace(findText, currentCourseAlias);
                    }
                }

                // cleanup: if we run this replacement twice, we'll end up with unnecessary nested elements <special-span><special-span>FULL COURSE NAME</special-span></special-span>
                let nestedSpan;
                while (
                    (nestedSpan = document.querySelector(
                        `span.${wrapClassName}>span.${wrapClassName}`
                    ))
                ) {
                    let parentText = nestedSpan.textContent;
                    let parentElem = nestedSpan.parentElement!;
                    while (parentElem.firstChild) {
                        parentElem.firstChild.remove();
                    }
                    parentElem.textContent = parentText;
                }
            }
        };
        applyCourseAliases();
    }

    // MUTATION HOOK
    let isModifying = false;

    // beware of performance implications of observing document.body
    let aliasPrepObserver = new MutationObserver(function (mutationsList) {
        if (isModifying) {
            return;
        }

        isModifying = true;

        let filteredList = mutationsList.filter(function (mutation) {
            for (let cssClass of (mutation.target as HTMLElement).classList) {
                // target blacklist
                // we don't care about some (especially frequent and performance-hurting) changes
                if (cssClass.startsWith("course-name-wrapper-")) {
                    // our own element, we don't care
                    return false;
                }
                if (cssClass.includes("pendo")) {
                    // Schoology's analytics platform, we don't care
                    return false;
                }
            }

            return true;
        });

        // this delegate has the conditional within it
        // TEMPORARY CHANGE: Disable searching for nicknames on DOM updates
        // if (applyCourseAliases) {
        //     applyCourseAliases(filteredList);
        // }

        if (applyThemeIcons && filteredList.length > 0) {
            applyThemeIcons();
        }

        isModifying = false;
    });
    // necessary (again) because on *some* pages, namely course-dashboard, we have a race condition
    // if the main body loads after our initial check but before the observe call (e.g. during our network awaits),
    // we won't catch the update until a separate unrelated DOM change
    // this is not as much of an issue with aliases because we do our initial check there after the network awaits,
    // which are by far the longest-running part of this code
    if (applyThemeIcons) {
        applyThemeIcons();
    }
    aliasPrepObserver.observe(document.body, { childList: true, subtree: true });
}

function displayGradesInNotificationDropdown() {
    function appendGradeToLink(
        gradeLink: HTMLElement,
        assignmentId: string,
        gradeContainer: Record<string, any>,
        isDynamic: boolean
    ) {
        if (
            !gradeLink.parentElement?.querySelector(
                `.grade-data${
                    isDynamic ? ".splus-addedtodynamicdropdown" : ""
                }[data-assignment-id=\"${assignmentId}\"]`
            )
        ) {
            // to control for already processed - race condition from the above
            let effectiveGrade = gradeContainer[assignmentId].grade;
            let effectiveTitle = undefined;
            if (effectiveGrade === null || effectiveGrade === undefined) {
                // exception: 1 excused
                // 2 incomplete
                // 3 missing
                if (gradeContainer[assignmentId].exception == 1) {
                    effectiveGrade = "â";
                    effectiveTitle = "Excused";
                } else if (gradeContainer[assignmentId].exception == 2) {
                    effectiveGrade = "*";
                    effectiveTitle = "Incomplete";
                } else if (gradeContainer[assignmentId].exception == 3) {
                    effectiveGrade = "0*";
                    effectiveTitle = "Missing";
                }
            }
            gradeLink.insertAdjacentElement(
                "afterend",
                createElement(
                    "span",
                    isDynamic ? ["grade-data", "splus-addedtodynamicdropdown"] : ["grade-data"],
                    {
                        textContent: ` (${effectiveGrade} / ${
                            gradeContainer[assignmentId].max_points || 0
                        })`,
                        dataset: { assignmentId: assignmentId },
                        title: effectiveTitle,
                    }
                )
            );
        }
    }

    let notifsMenuContainer = document.querySelector(
        '#header nav button[aria-label$="notifications"], #header nav button[aria-label$="notification"]'
    )?.parentElement;
    let gradesLoadedPromise = (async function () {
        let myGrades = await fetchApiJson(`/users/${getUserId()}/grades`);

        let loadedGradeContainer: Record<string, any> = {};

        // assignment grades
        // period is an array of object
        // period[x].assignment is an array of grade objects (the ones we want to enumerate)
        for (let assignment of myGrades.section.reduce(
            (oa: Record<string, any>[], thisClassGrades: Record<string, any>) =>
                oa.concat(
                    thisClassGrades.period.reduce(
                        (accum: Record<string, any>[], curr: Record<string, any>) =>
                            accum.concat(curr.assignment),
                        []
                    )
                ),
            []
        )) {
            loadedGradeContainer[assignment.assignment_id] = assignment;
            Object.freeze(assignment);
        }

        Object.freeze(loadedGradeContainer);

        return loadedGradeContainer;
    })();

    let notifsDropdownObserver = new MutationObserver(function (mutationList) {
        if (!shouldProcessMutations(mutationList)) {
            return;
        }

        chrome.runtime.sendMessage({ type: "setBadgeText", text: "" });

        let coll =
            notifsMenuContainer?.querySelectorAll<HTMLAnchorElement>('a[href^="/assignment/"]') ??
            [];

        if (coll.length > 0) {
            Logger.log("NotifsDropdown observation has links to process - processing now");
        }

        // obfuscated classnames identify the div containers of our individual notifications (explicitly excluding the "View All" button)
        for (let gradeLink of coll) {
            if (gradeLink.offsetParent == null) {
                // hidden and therefore irrelevant
                continue;
            }

            // correct the showing of "N other people" on assignment/grade notifications which should read "N other assignments"
            if (
                !gradeLink.parentElement?.classList.contains(
                    "splus-people-are-assignments-corrected"
                )
            ) {
                let parentElem = gradeLink.parentElement;
                if (
                    parentElem?.firstElementChild?.textContent?.includes("grade") &&
                    parentElem?.firstElementChild?.textContent?.includes("posted")
                ) {
                    // a grades posted notification
                    for (let candidateSpan of parentElem.getElementsByTagName("span")) {
                        if (candidateSpan?.textContent?.includes("other people")) {
                            candidateSpan.textContent = candidateSpan.textContent.replace(
                                "other people",
                                "other assignments"
                            );
                        }
                    }
                    parentElem.classList.add("splus-people-are-assignments-corrected");
                }
            }

            let assignmentId = (gradeLink.href.match(/\d+/) || [])[0];

            if (!assignmentId) {
                continue;
            }

            gradesLoadedPromise.then(gradeContainer => {
                appendGradeToLink(gradeLink, assignmentId!, gradeContainer, true);
            });
        }
    });

    notifsDropdownObserver.observe(notifsMenuContainer as HTMLElement, {
        childList: true,
        subtree: true,
    });

    if (window.location.pathname == "/home/notifications") {
        // notifications page: legacy style

        let processItemList = function (itemList: HTMLElement) {
            for (let gradeLink of itemList.querySelectorAll<HTMLAnchorElement>(
                '.s-edge-type-grade-add a[href^="/assignment/"]'
            )) {
                if (gradeLink.offsetParent == null) {
                    // hidden and therefore irrelevant
                    continue;
                }

                let assignmentId = (gradeLink.href.match(/\d+/) || [])[0];

                if (!assignmentId) {
                    continue;
                }

                gradesLoadedPromise.then(gradeContainer => {
                    appendGradeToLink(gradeLink, assignmentId!, gradeContainer, false);
                });
            }
        };

        let itemList = document.querySelector(
            "#main-inner .item-list ul.s-notifications-mini"
        ) as HTMLElement;

        let oldNotifsObserver = new MutationObserver(function () {
            processItemList(itemList);
        });

        processItemList(itemList);

        oldNotifsObserver.observe(itemList, { childList: true });
    }

    let moreGradesModalObserver = new MutationObserver(mutationsList => {
        for (let mutation of mutationsList) {
            for (let addedNode of mutation.addedNodes as NodeListOf<HTMLElement>) {
                if (!addedNode.classList.contains("popups-box")) {
                    continue;
                }

                if (
                    addedNode
                        .querySelector(".popups-title .title")
                        ?.textContent?.trim()
                        ?.toLowerCase() != "grades"
                ) {
                    continue;
                }

                for (let assignmentWrapper of addedNode.querySelectorAll<HTMLElement>(
                    ".popups-body .item-list li .user-item"
                )) {
                    if (assignmentWrapper.offsetParent == null) {
                        // hidden and therefore irrelevant
                        continue;
                    }

                    let assignmentId = assignmentWrapper
                        ?.getElementsByTagName("a")?.[1]
                        ?.href?.match(/\d+/)?.[0];

                    gradesLoadedPromise.then(gradeContainer => {
                        assignmentWrapper?.querySelector(".grade-added")?.insertAdjacentElement(
                            "beforebegin",
                            createElement("span", ["grade-data"], {
                                textContent: ` (${gradeContainer[assignmentId!].grade} / ${
                                    gradeContainer[assignmentId!].max_points || 0
                                })`,
                            })
                        );
                    });
                }
                return;
            }
        }
    });

    moreGradesModalObserver.observe(document.body, { childList: true });
}

function preventScrollingWhenModalOpen() {
    new MutationObserver((mutations, observer) => {
        if (document.getElementById("body")?.getAttribute("aria-hidden") == "true") {
            document.documentElement.style.overflow = "hidden";
        } else {
            document.documentElement.style.overflow = "";
        }
    }).observe(document.getElementById("body") as HTMLElement, {
        attributes: true,
        attributeFilter: ["aria-hidden"],
    });
}

function autoBypassLinkRedirects() {
    if (location.pathname.startsWith("/link") && Settings.BypassLinkRedirects.value === "enabled") {
        let path = new URLSearchParams(location.search).get("path");
        if (path) {
            location.href = path;
        }
    }
}

function displayAssessmentDarkThemeWarningMessage() {
    setTimeout(() => {
        let assessmentStartContainer = document.querySelector(
            `.assessment-delivery-landing-app div._3dHTa`
        );

        if (assessmentStartContainer) {
            assessmentStartContainer.appendChild(
                createElement(
                    "div",
                    [],
                    {
                        id: "assessment-darktheme-warning-message",
                        textContent:
                            "WARNING: A dark theme is enabled and might prevent you from reading certain questions. If you can't read a question, you can temporarily disable dark theme using the Toggle Theme button on the navigation bar.",
                        dataset: {
                            popup: Settings.Popups.nestedValue(
                                "assessmentDarkThemeWarning",
                                true
                            ).toString(),
                        },
                        style: { display: "none" },
                    },
                    [
                        createElement("p", ["click-to-hide"], {}, [
                            createElement("span", [], {
                                textContent: "Hide this once",
                                onclick: () =>
                                    document
                                        .getElementById("assessment-darktheme-warning-message")
                                        ?.remove(),
                            }),
                            createElement("b", [], { textContent: " â¢ " }),
                            createElement("span", [], {
                                textContent: "Never show again",
                                onclick: () => {
                                    Settings.Popups.nestedValue(
                                        "assessmentDarkThemeWarning",
                                        false
                                    );
                                    (
                                        document.getElementById(
                                            "assessment-darktheme-warning-message"
                                        ) as HTMLElement
                                    ).dataset.popup = "false";
                                },
                            }),
                        ]),
                    ]
                )
            );
        }
    }, 1000);
}

function parseSettingsHash() {
    let hashes = location.hash.split("#");
    if (hashes.length > 1 && hashes[1] === "splus-settings") {
        Modal.openModal("settings-modal");
        if (hashes.length > 2) {
            setTimeout(() => {
                location.hash = hashes[2];
                let settingEntry = document.getElementById(hashes[2])?.parentElement?.parentElement;
                let settingTab = settingEntry?.parentElement!;
                let tabIndex =
                    Array.from(settingTab?.parentElement?.children ?? []).indexOf(settingTab) - 1;
                $(".splus-settings-tabs").tabs("option", "active", tabIndex);
                settingEntry?.classList.add("setting-highlight");
                location.hash = "";
            }, 500);
        } else {
            location.hash = "";
        }
    }
}

function createSettingsHashListener() {
    parseSettingsHash();

    // Handle opening Schoology Plus Settings
    window.addEventListener("hashchange", event => {
        parseSettingsHash();
    });
}
